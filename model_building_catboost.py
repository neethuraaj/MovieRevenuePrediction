# -*- coding: utf-8 -*-
"""Model_building-Catboost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z512bRW0W12jYJeZ8aAGL5_dPxDvAcnk
"""

#import necessary packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import pickle
import warnings
warnings.filterwarnings('ignore')

data=pd.read_csv('CLEAN.csv',encoding ='ISO-8859-1')

data.shape

data.info()

data['release_date'] = pd.to_datetime(data['release_date'])

data.head(3)

data.isna().sum()

df=data.copy()

df.info()

df = df.drop(['Unnamed: 0','id', 'title','popularity', 'release_date','vote_average','vote_count','weighted_vote','popularity_category'], axis=1)

"""### Scaling"""

from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import minmax_scale

"""#### Scaling of data with outliers"""

from sklearn.preprocessing import MinMaxScaler

# Create a copy of the original DataFrame
scaled_df = df.copy()

# Select the continuous numerical columns for scaling, here avoid revenue column since it is the target column
#columns_to_scale = [ 'budget','runtime']  # Replace with the actual column names

# Initialize the MinMaxScaler
scaler1 = MinMaxScaler()
scaler2=MinMaxScaler()

# Scale the selected columns in the scaled DataFrame
scaled_df['budget'] = scaler1.fit_transform(df[['budget']])
scaled_df['runtime'] = scaler2.fit_transform(df[['runtime']])
# Display the scaled DataFrame
scaled_df





"""## Model Building"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import r2_score as r2
from sklearn.metrics import accuracy_score

x=scaled_df.drop(['revenue'],axis=1)
y=scaled_df[['revenue']]

from sklearn.preprocessing import LabelEncoder
le1=LabelEncoder()
x[['genres']]=x[['genres']].apply(le1.fit_transform)
le2=LabelEncoder()
x[['production_companies']]=x[['production_companies']].apply(le2.fit_transform)

x.head()

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

from catboost import CatBoostRegressor 
from sklearn.metrics import r2_score
cat = CatBoostRegressor()
mod=cat.fit(x_train, y_train)
# Make predictions on the test set
y_pred = mod.predict(x_test)

# Calculate the R^2 score
r2 = r2_score(y_test, y_pred)

print("R^2 score:", r2)

CBR_pkl=open('CBR.pkl','wb')
pickle.dump(mod,CBR_pkl)
CBR_pkl.close()

#Label Encoder Pickle 
leR1_pkl = open('leR1.pkl','wb')
pickle.dump(le1,leR1_pkl)
leR1_pkl.close()

#Label Encoder Pickle 
leR2_pkl = open('leR2.pkl','wb')
pickle.dump(le2,leR2_pkl)
leR2_pkl.close()

SC1_pkl = open('SC1.pkl','wb')
pickle.dump(scaler1,SC1_pkl)
SC1_pkl.close()

SC2_pkl = open('SC2.pkl','wb')
pickle.dump(scaler2,SC2_pkl)
SC2_pkl.close()

le_1=pickle.load(open('leR1.pkl','rb'))

le_2=pickle.load(open('leR2.pkl','rb'))

sc_1=pickle.load(open('SC1.pkl','rb'))

sc_2=pickle.load(open('SC2.pkl','rb'))